// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["typedSql"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  username String  @unique
  name     String?
  active   Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Existing relationships
  image       UserImage?
  password    Password?
  notes       Note[]
  roles       Role[]
  sessions    Session[]
  connections Connection[]
  passkey     Passkey[]

  // Interex specific relationships
  customer       Customer? @relation(fields: [customerId], references: [id])
  customerId     String?
  providerGroup  ProviderGroup? @relation(fields: [providerGroupId], references: [id])
  providerGroupId String?
  
  // User can be assigned multiple NPIs
  userNpis       UserNpi[]

  // Submissions created by this user
  submissions         Submission[]
  submissionDocuments SubmissionDocument[]

  @@index([customerId])
  @@index([providerGroupId])
}

model Note {
  id      String @id @default(cuid())
  title   String
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String

  images NoteImage[]

  // non-unique foreign key
  @@index([ownerId])
  // This helps our order by in the user search a LOT
  @@index([ownerId, updatedAt])
}

model NoteImage {
  id        String  @id @default(cuid())
  altText   String?
  objectKey String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  note   Note   @relation(fields: [noteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  noteId String

  // non-unique foreign key
  @@index([noteId])
}

model UserImage {
  id        String  @id @default(cuid())
  altText   String?
  objectKey String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // non-unique foreign key
  @@index([userId])
}

model Permission {
  id          String @id @default(cuid())
  action      String // e.g. create, read, update, delete
  entity      String // e.g. note, user, etc.
  access      String // e.g. own or any
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]

  @@unique([action, entity, access])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String @default("")
  active      Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permission[]
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// The valid characters for the otp
  charSet String

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Connection {
  id           String @id @default(cuid())
  providerName String
  providerId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@unique([providerName, providerId])
}

model Passkey {
  id             String   @id
  aaguid         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  publicKey      Bytes
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  webauthnUserId String
  counter        BigInt
  deviceType     String // 'singleDevice' or 'multiDevice'
  backedUp       Boolean
  transports     String? // Stored as comma-separated values

  @@index(userId)
}

// =============================================
// CMS Interex User Management Models 
// =============================================

model Customer {
  id          String @id @default(cuid())
  name        String
  description String @default("")
  active      Boolean @default(true)
  
  // Business Associate Agreement details (optional for now)
  baaNumber   String? @unique
  baaDate     DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  users           User[]
  providerGroups  ProviderGroup[]
  providers       Provider[]
  submissions     Submission[]

  @@index([name])
}

model ProviderGroup {
  id          String @id @default(cuid())
  name        String
  description String @default("")
  active      Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Belongs to a Customer
  customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId  String

  // Relationships
  users       User[]
  providers   Provider[]

  @@unique([customerId, name]) // Provider group names must be unique within a customer
  @@index([customerId])
}

model Provider {
  id        String @id @default(cuid())
  npi       String @unique // National Provider Identifier (10-digit number)
  name      String?
  active    Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Belongs to a Customer and optionally to a ProviderGroup
  customer         Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId       String
  providerGroup    ProviderGroup? @relation(fields: [providerGroupId], references: [id])
  providerGroupId  String?

  // Many-to-many with Users (users can be assigned multiple NPIs)
  userNpis         UserNpi[]
  
  // Submissions for this provider
  submissions      Submission[]

  @@index([customerId])
  @@index([providerGroupId])
  @@index([npi])
}

model UserNpi {
  id String @id @default(cuid())
  
  createdAt DateTime @default(now())
  
  // Links User to Provider (NPI)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  provider   Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId String

  @@unique([userId, providerId]) // User can only be assigned to same NPI once
  @@index([userId])
  @@index([providerId])
}

// =============================================
// Submission Management Models (HIH-compatible)
// =============================================

model Submission {
  id                String @id @default(cuid())
  title             String
  purposeOfSubmission SubmissionPurpose
  recipient         String // Receiving partner
  claimId           String? // Optional for some submission types
  caseId            String? // Optional case ID (up to 32 chars, required for PERM RC)
  comments          String? // Additional notes
  status            SubmissionStatus @default(DRAFT)
  authorType        String @default("Individual") // Auto-populated as "Individual"
  
  // CMS HIH Gateway specific fields
  autoSplit         Boolean @default(false) // auto_split field for CMS HIH
  category          SubmissionCategory @default(DEFAULT) // metadata element type
  sendInX12         Boolean @default(false) // bSendinX12 field
  threshold         Int @default(100) // threshold value
  
  // Response tracking from CMS HIH Gateway
  fhirAcknowledgment String? // Acknowledgment received from FHIR service
  transactionId     String? // Generated transaction ID after successful upload
  responseMessage   String? // Response message from FHIR endpoint
  errorDescription  String? // Error description for failed submissions
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  submittedAt DateTime? // When submission was sent to FHIR endpoint
  
  // Relationships
  creator     User     @relation(fields: [creatorId], references: [id])
  creatorId   String
  provider    Provider @relation(fields: [providerId], references: [id])
  providerId  String   // NPI for this submission
  customer    Customer @relation(fields: [customerId], references: [id])
  customerId  String
  
  // Submission documents
  documents   SubmissionDocument[]
  
  @@index([creatorId])
  @@index([providerId])
  @@index([customerId])
  @@index([status])
  @@index([purposeOfSubmission])
}

model SubmissionDocument {
  id                        String @id @default(cuid())
  title                     String? // Optional title of document
  fileName                  String // Populated after upload
  originalFileName          String // Original file name from upload
  fileSize                  Int // File size in bytes
  mimeType                  String // MIME type of the file
  objectKey                 String // Storage key for the file
  language                  String @default("English") // Auto-populated as "English"
  documentType              DocumentType @default(PDF) // Auto-populated as "PDF"
  attachmentControlNumber   String? // Optional attachment control number
  comments                  String? // Optional comments
  fhirResourceId            String? // FHIR resource ID after upload
  uploadStatus              DocumentUploadStatus @default(PENDING) // Upload status to FHIR endpoint
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  submission    Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  submissionId  String
  uploader      User @relation(fields: [uploaderId], references: [id])
  uploaderId    String
  
  @@index([submissionId])
  @@index([uploaderId])
}

// Document upload status for FHIR endpoint uploads
enum DocumentUploadStatus {
  PENDING                   // Document ready for upload
  UPLOADING                 // Currently being uploaded to FHIR endpoint
  UPLOADED                  // Successfully uploaded to FHIR endpoint
  UPLOAD_FAILED             // Failed to upload to FHIR endpoint
}

// Submission category for ADR metadata element types
enum SubmissionCategory {
  DEFAULT              // default
  MEDICAL_REVIEW       // medicalreview 
  NON_MEDICAL_REVIEW   // non-medicalreview
  RESPONSES_FOR_PA     // responsesforpa/prrequests
}

// Supported submission purposes based on HIH specification
enum SubmissionPurpose {
  ADR                    // Additional Documentation Request
  PA_ABT                 // Prior Authorization for Ambulatory services
  PA_DMEPOS             // Prior Authorizations for Durable Medical Equipment, Prosthetics/Orthotics & Supplies
  HH_PRE_CLAIM          // Home Health Pre-Claim
  HOPD                  // Hospital Outpatient Department
  PWK_CLAIM_DOCUMENTATION // PWK Claim Documentation
  FIRST_APPEAL          // 1st-Appeal
  SECOND_APPEAL         // 2nd-Appeal
  DME_DISCUSSION        // DME Discussion
  RA_DISCUSSION         // RA Discussion
  ADMC                  // Advance Determination of Medical Coverage Request
  IRF                   // Inpatient Rehabilitation Facility
  PROVIDER_MANAGEMENT   // Provider Management
  POST_PAY_EMDR         // Post-Pay eMDR Letters
  PRE_PAY_EMDR          // Pre-Pay eMDR Letters
  POST_PAY_OTHER_EMDR   // Post-pay Other eMDR Letters
  PADL_RRL_LETTERS      // PADL/RRL Letters
}

// Submission status workflow for direct FHIR endpoint uploads
enum SubmissionStatus {
  DRAFT                     // Can be edited, documents can be added/removed
  SUBMITTED                 // Submitted to FHIR endpoint
  PROCESSING                // Being processed by FHIR endpoint
  COMPLETED                 // Processing completed successfully
  REJECTED                  // Submission rejected
  ERROR                     // Error occurred during processing
}

// Supported document types (extensible for future HIH requirements)
enum DocumentType {
  PDF
  DOC
  DOCX
  TXT
  JPG
  JPEG
  PNG
  TIFF
  XLS
  XLSX
}
